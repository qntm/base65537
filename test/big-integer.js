const assert = require('assert')
const bigInteger = require('../src/big-integer.js')

console.log('bigInteger(10).increment()')
const ten = bigInteger(10)
assert.deepStrictEqual(ten.increment([]), [1])
assert.deepStrictEqual(ten.increment([1]), [2])
assert.deepStrictEqual(ten.increment([8]), [9])
assert.deepStrictEqual(ten.increment([9]), [1, 0])
assert.deepStrictEqual(ten.increment([5, 6, 7]), [5, 6, 8])
assert.deepStrictEqual(ten.increment([9, 9, 9, 9]), [1, 0, 0, 0, 0])
console.log()

console.log('bigInteger(10).decrement()')
assert.deepStrictEqual(ten.decrement([1]), [])
assert.deepStrictEqual(ten.decrement([2]), [1])
assert.deepStrictEqual(ten.decrement([9]), [8])
assert.deepStrictEqual(ten.decrement([1, 0]), [9])
assert.deepStrictEqual(ten.decrement([5, 6, 8]), [5, 6, 7])
assert.deepStrictEqual(ten.decrement([1, 0, 0, 0, 0]), [9, 9, 9, 9])
console.log()

console.log('bigInteger(10).add()')
assert.deepStrictEqual(ten.add([], []), [])
// assert.deepStrictEqual(ten.add([], [1]), [1]);
assert.deepStrictEqual(ten.add([1], []), [1])
assert.deepStrictEqual(ten.add([2], [4]), [6])
assert.deepStrictEqual(ten.add([9, 9], [9, 9]), [1, 9, 8])
// assert.deepStrictEqual(ten.add([1, 3, 7], [2, 8, 0, 5]), [2, 9, 4, 2]);
assert.deepStrictEqual(ten.add([2, 8, 0, 5], [1, 3, 7]), [2, 9, 4, 2])
console.log()

console.log('bigInteger(10).multiplyX()')
assert.deepStrictEqual(ten.multiplyX([2, 7, 3], 8), [2, 1, 8, 4])
assert.deepStrictEqual(ten.multiplyX([9, 9], 9), [8, 9, 1])
assert.deepStrictEqual(ten.multiplyX([9, 9], 1), [9, 9])
assert.deepStrictEqual(ten.multiplyX([9, 9], 0), [])
console.log()

console.log('bigInteger(10).multiply()')
assert.deepStrictEqual(ten.multiply([], []), [])
assert.deepStrictEqual(ten.multiply([], [1]), [])
assert.deepStrictEqual(ten.multiply([], [73]), [])
assert.deepStrictEqual(ten.multiply([1], [1]), [1])
assert.deepStrictEqual(ten.multiply([1], [6]), [6])
assert.deepStrictEqual(ten.multiply([6], [1]), [6])
assert.deepStrictEqual(ten.multiply([1, 0], [1, 0]), [1, 0, 0])
assert.deepStrictEqual(ten.multiply([6, 1], [6]), [3, 6, 6])
assert.deepStrictEqual(ten.multiply([2, 7, 3], [8]), [2, 1, 8, 4])
assert.deepStrictEqual(ten.multiply([7, 3], [2, 2]), [1, 6, 0, 6])
console.log()

console.log('bigInteger(10).represent()')
assert.deepStrictEqual(ten.represent(0), [])
assert.deepStrictEqual(ten.represent(1), [1])
assert.deepStrictEqual(ten.represent(9), [9])
assert.deepStrictEqual(ten.represent(10), [1, 0])
assert.deepStrictEqual(ten.represent(35981), [3, 5, 9, 8, 1])
console.log()

console.log('bigInteger(8).<most things>')
const eight = bigInteger(8)
assert.deepStrictEqual(eight.increment([]), [1])
assert.deepStrictEqual(eight.increment([1]), [2])
assert.deepStrictEqual(eight.increment([6]), [7])
assert.deepStrictEqual(eight.increment([7]), [1, 0])
assert.deepStrictEqual(eight.increment([5, 6, 5]), [5, 6, 6])
assert.deepStrictEqual(eight.increment([7, 7, 7, 7]), [1, 0, 0, 0, 0])
assert.deepStrictEqual(eight.decrement([1]), [])
assert.deepStrictEqual(eight.decrement([2]), [1])
assert.deepStrictEqual(eight.decrement([7]), [6])
assert.deepStrictEqual(eight.decrement([1, 0]), [7])
assert.deepStrictEqual(eight.decrement([5, 6, 6]), [5, 6, 5])
assert.deepStrictEqual(eight.decrement([1, 0, 0, 0, 0]), [7, 7, 7, 7])
console.log()

console.log('bigInteger(8).add()')
assert.deepStrictEqual(eight.add([], []), [])
// assert.deepStrictEqual(eight.add([], [1]), [1]);
assert.deepStrictEqual(eight.add([1], []), [1])
assert.deepStrictEqual(eight.add([4, 4, 6], []), [4, 4, 6])
assert.deepStrictEqual(eight.add([4, 4, 6], [1]), [4, 4, 7])
assert.deepStrictEqual(eight.add([4, 4, 7], [1]), [4, 5, 0])
assert.deepStrictEqual(eight.add([4, 4, 6], [2]), [4, 5, 0])
assert.deepStrictEqual(eight.add([4, 4, 6], [3]), [4, 5, 1])
console.log()

console.log('bigInteger(8).multiply()')
assert.deepStrictEqual(eight.multiply([1, 0], [1, 0]), [1, 0, 0])
assert.deepStrictEqual(eight.multiply([6, 1], [6]), [4, 4, 6])
console.log()

console.log('bigInteger(8).represent()')
assert.deepStrictEqual(eight.represent(0), [])
assert.deepStrictEqual(eight.represent(64), [1, 0, 0])
assert.deepStrictEqual(eight.represent(297), [4, 5, 1])
console.log()

console.log('bigInteger(65537)')
assert.deepStrictEqual(bigInteger(65537).multiply([], [4, 0, 4, 4, 1, 2, 2]), [])
assert.deepStrictEqual(bigInteger(65537).multiply([1], [4, 0, 4, 4, 1, 2, 2]), [4, 0, 4, 4, 1, 2, 2])
console.log()
